# Split Train and Test Dataset -----------------------------------#

np.random.seed(42)

import numpy as np
def split_train_test(data, test_ratio):
  shuffled_indices = np.random.permutation(len(data))
  test_set_size = int(len(data) * test_ratio)
  test_indices = shuffled_indices[:test_set_size]
  train_indices = shuffled_indices[test_set_size:]
  return data.iloc[train_indices], data.iloc[test_indices]
  
train_set, test_set = split_train_test(housing, 0.2)



# time based split -----------------------------------#

np.random.seed(42)

# Sort Data
df1 = df1.sort_values('TREND').reset_index().drop('index',axis=1)
df1.head()

# Find row where to split test dataset
val_obs = df1[df1.TREND == 22].index.min()
val_obs

x_train1 = np.array(df1[['ADJ_EMPID']].iloc[0:val_obs])
x_train2 = np.array(df1.iloc[0:val_obs, 2:])
y_train = np.array(df1[['SRC']].iloc[0:val_obs])

x_test1 = np.array(df1[['ADJ_EMPID']].iloc[val_obs:])
x_test2 = np.array(df1.iloc[val_obs:, 2:])
y_test = np.array(df1[['SRC']].iloc[val_obs:])


# Stratified Sampling -----------------------------------#

from sklearn.model_selection import StratifiedShuffleSplit

split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
for train_index, test_index in split.split(housing, housing["income_cat"]):
  strat_train_set = housing.loc[train_index]
  strat_test_set = housing.loc[test_index]
  
housing["income_cat"].value_counts() / len(housing)
